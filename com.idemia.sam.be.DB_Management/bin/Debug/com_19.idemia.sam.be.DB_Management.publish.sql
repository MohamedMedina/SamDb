/*
Deployment script for SAM_DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SAM_DB"
:setvar DefaultFilePrefix "SAM_DB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [Transactions].[Customer].[Code_Unique]...';


GO
DROP INDEX [Code_Unique]
    ON [Transactions].[Customer];


GO
PRINT N'Creating [Transactions].[Request]...';


GO
CREATE TABLE [Transactions].[Request] (
    [Id]                INT           IDENTITY (1, 1) NOT NULL,
    [requestNumber]     NVARCHAR (10) NOT NULL,
    [totalQuantity]     INT           NULL,
    [PDD]               DATETIME      NULL,
    [customerID]        INT           NULL,
    [creationDate]      DATETIME      NULL,
    [creationUserID]    INT           NULL,
    [approvalDate]      DATETIME      NULL,
    [approvalUserID]    INT           NULL,
    [receiveDate]       DATETIME      NULL,
    [receiveUserID]     INT           NULL,
    [rejectionDate]     DATETIME      NULL,
    [rejectionUserID]   INT           NULL,
    [rejectionReasonID] INT           NULL,
    [requestTypeID]     INT           NULL,
    [requestStatusID]   INT           NULL,
    [requestCalssID]    INT           NULL,
    [requestPriorityID] INT           NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Transactions].[FK_CustomerID_Request]...';


GO
ALTER TABLE [Transactions].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_CustomerID_Request] FOREIGN KEY ([customerID]) REFERENCES [Transactions].[Customer] ([Id]);


GO
PRINT N'Creating [Transactions].[FK_CreationUserID_Request]...';


GO
ALTER TABLE [Transactions].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_CreationUserID_Request] FOREIGN KEY ([creationUserID]) REFERENCES [Lookups].[User] ([Id]);


GO
PRINT N'Creating [Transactions].[FK_ApprovalUserID_Request]...';


GO
ALTER TABLE [Transactions].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_ApprovalUserID_Request] FOREIGN KEY ([approvalUserID]) REFERENCES [Lookups].[User] ([Id]);


GO
PRINT N'Creating [Transactions].[FK_ReceiveUserID_Request]...';


GO
ALTER TABLE [Transactions].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_ReceiveUserID_Request] FOREIGN KEY ([receiveUserID]) REFERENCES [Lookups].[User] ([Id]);


GO
PRINT N'Creating [Transactions].[FK_RejectionUserID_Request]...';


GO
ALTER TABLE [Transactions].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_RejectionUserID_Request] FOREIGN KEY ([rejectionUserID]) REFERENCES [Lookups].[User] ([Id]);


GO
PRINT N'Creating [Transactions].[FK_RejectionReasonID_Request]...';


GO
ALTER TABLE [Transactions].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_RejectionReasonID_Request] FOREIGN KEY ([rejectionReasonID]) REFERENCES [Lookups].[RejectReason] ([Id]);


GO
PRINT N'Creating [Transactions].[FK_RequestTypeID_Request]...';


GO
ALTER TABLE [Transactions].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestTypeID_Request] FOREIGN KEY ([requestTypeID]) REFERENCES [Lookups].[RequestType] ([Id]);


GO
PRINT N'Creating [Transactions].[FK_RequestStatusID_Request]...';


GO
ALTER TABLE [Transactions].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestStatusID_Request] FOREIGN KEY ([requestStatusID]) REFERENCES [Lookups].[RequestStatus] ([Id]);


GO
PRINT N'Creating [Transactions].[FK_RequestClassID_Request]...';


GO
ALTER TABLE [Transactions].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestClassID_Request] FOREIGN KEY ([requestCalssID]) REFERENCES [Lookups].[RequestClass] ([Id]);


GO
PRINT N'Creating [Transactions].[FK_RequestPriorityID_Request]...';


GO
ALTER TABLE [Transactions].[Request] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestPriorityID_Request] FOREIGN KEY ([requestPriorityID]) REFERENCES [Lookups].[RequestPriority] ([Id]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

CREATE UNIQUE NONCLUSTERED INDEX [Code_Unique] ON [Transactions].[Customer] ([code] ASC)
WHERE ([code] IS NOT NULL)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Transactions].[Request] WITH CHECK CHECK CONSTRAINT [FK_CustomerID_Request];

ALTER TABLE [Transactions].[Request] WITH CHECK CHECK CONSTRAINT [FK_CreationUserID_Request];

ALTER TABLE [Transactions].[Request] WITH CHECK CHECK CONSTRAINT [FK_ApprovalUserID_Request];

ALTER TABLE [Transactions].[Request] WITH CHECK CHECK CONSTRAINT [FK_ReceiveUserID_Request];

ALTER TABLE [Transactions].[Request] WITH CHECK CHECK CONSTRAINT [FK_RejectionUserID_Request];

ALTER TABLE [Transactions].[Request] WITH CHECK CHECK CONSTRAINT [FK_RejectionReasonID_Request];

ALTER TABLE [Transactions].[Request] WITH CHECK CHECK CONSTRAINT [FK_RequestTypeID_Request];

ALTER TABLE [Transactions].[Request] WITH CHECK CHECK CONSTRAINT [FK_RequestStatusID_Request];

ALTER TABLE [Transactions].[Request] WITH CHECK CHECK CONSTRAINT [FK_RequestClassID_Request];

ALTER TABLE [Transactions].[Request] WITH CHECK CHECK CONSTRAINT [FK_RequestPriorityID_Request];


GO
PRINT N'Update complete.';


GO
